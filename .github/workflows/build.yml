name: build opensource COBOL 4J

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.os }}
    steps: 
      - uses: actions/setup-java@v4
        if: inputs.os == 'ubuntu:22.04'
        with:
          distribution: 'temurin'
          java-version: '21'

      - uses: actions/setup-java@v4
        if: inputs.os == 'almalinux:9'
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install dependencies on Ubuntu 22.04
        if: inputs.os == 'ubuntu:22.04'
        run: |
          apt update -y
          apt install -y build-essential gettext autoconf

      - name: Install dependencies on AlmaLinux 9
        if: inputs.os == 'almalinux:9'
        run: |
          dnf -y update
          dnf install -y gcc make autoconf diffutils gettext

      - name: Install dependencies on Amazon Linux 2023
        if: inputs.os == 'amazonlinux:2023'
        run: |
          dnf -y update
          dnf install -y java-21-amazon-corretto-devel gcc make autoconf diffutils gettext tar gzip

      - name: Checkout opensource COBOL 4J
        uses: actions/checkout@v4
      
      - name: Install opensource COBOL 4J
        run: |
          ./configure --prefix=/usr/ CFLAGS=-Werror
          make
          echo ARTIFACT_NAME=${{ inputs.os }} | sed 's/:/-/g' >> $GITHUB_ENV

      - name: Create an artifact file
        run: |
         cd ../
         tar zcf opensourcecobol4j.tar.gz opensourcecobol4j
         mv opensourcecobol4j.tar.gz opensourcecobol4j
      
      - name: Upload an artifact
        uses: actions/upload-artifact@v4
        with:
          name: opensourcecobol4j-${{ env.ARTIFACT_NAME }}
          path: opensourcecobol4j.tar.gz
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=test-opensource-cobol4j -Dsonar.projectName='test-opensource-cobol4j'
