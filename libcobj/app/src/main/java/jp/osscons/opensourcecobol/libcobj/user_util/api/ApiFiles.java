/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jp.osscons.opensourcecobol.libcobj.user_util.api;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.json.JSONArray;
import org.json.JSONObject;

public class ApiFiles {
  public static void main(String[] args) {
    ApiFilesOptions.getOptions(args);

    if (args.length == 0) {
      System.out.println("No json file is specified.");
      System.exit(1);
    }

    String file_path;
    try {
      file_path = args[1];
    } catch (ArrayIndexOutOfBoundsException e) {
      file_path = args[0];
    }

    JavaCreate(file_path);
  }

  public static void JavaCreate(String file_path) {
    try {
      String json = new String(Files.readAllBytes(Paths.get(file_path)));
      JSONObject obj = new JSONObject(json);
      String program_id = obj.getString("program_id");
      JSONArray params = obj.getJSONArray("procedure_division_using_parameters");

      String output_dir;
      FileWriter sp_file;
      FileWriter rcd_file;

      if (ApiFilesOptions.output_dir != null) {
        output_dir = ApiFilesOptions.output_dir + "/";
        sp_file = new FileWriter(output_dir + program_id + "Controller.java");
        rcd_file = new FileWriter(output_dir + program_id + "Record.java");
      } else {
        sp_file = new FileWriter(program_id + "Controller.java");
        rcd_file = new FileWriter(program_id + "Record.java");
      }

      PrintWriter sp_writer = new PrintWriter(sp_file);
      PrintWriter rcd_writer = new PrintWriter(rcd_file);

      sp_writer.println(WriteController(sp_file, program_id, params));
      rcd_writer.println(WriteRecord(rcd_file, program_id, params));

      sp_writer.close();
      rcd_writer.close();

    } catch (IOException e) {
      e.printStackTrace();
      System.err.println("Error reading file: " + e.getMessage());
      System.exit(1);
    }
  }

  public static String WriteController(FileWriter sp_file, String program_id, JSONArray params) {
    JSONObject param;
    String name;
    String type;
    String defaultValue;
    String methodName;
    String name_controller = program_id + "Controller";
    String name_record = program_id + "Record";
    int i;
    String output;

    if (ApiFilesOptions.package_name != null) {
      output = "package " + ApiFilesOptions.package_name + ";\n";
    } else {
      output = "package com.example.restservice;\n";
    }

    output +=
        "import java.util.concurrent.atomic.AtomicLong;\n"
            + "import org.springframework.web.bind.annotation.GetMapping;\n"
            + "import org.springframework.web.bind.annotation.RequestParam;\n"
            + "import org.springframework.web.bind.annotation.RestController;\n"
            + "import jp.osscons.opensourcecobol.libcobj.ui.*;\n\n";

    output +=
        "@RestController\n"
            + "public class "
            + name_controller
            + " {\n"
            + "    @GetMapping(\"/"
            + program_id
            + "\")\n"
            + "    public "
            + name_record
            + " "
            + name_controller
            + "(\n";

    for (i = 0; i < params.length(); ++i) {
      param = params.getJSONObject(i);
      name = param.getString("variable_name");
      type = param.getString("java_type");
      if (type.equals("String")) {
        defaultValue = "\"\"";
      } else {
        defaultValue = "\"0\"";
      }

      output +=
          "        @RequestParam(value = "
              + "\""
              + name
              + "\", defaultValue = "
              + defaultValue
              + ") "
              + type
              + " "
              + name;

      if (i < params.length() - 1) {
        output += ",\n";
      } else {
        output += "\n";
      }
    }

    output +=
        "    ) {\n"
            + "        int statuscode = 200;\n"
            + "        "
            + program_id
            + " "
            + program_id
            + "Cobol = new "
            + program_id
            + "();\n"
            + "        CobolResultSet result = "
            + program_id
            + "Cobol.execute(";

    for (i = 0; i < params.length(); ++i) {
      param = params.getJSONObject(i);
      name = param.getString("variable_name");
      output += name;

      if (i < params.length() - 1) {
        output += ", ";
      }
    }
    output += ");\n" + "        try {\n";

    for (i = 0; i < params.length(); ++i) {
      param = params.getJSONObject(i);
      name = param.getString("variable_name");
      type = param.getString("java_type");
      if (type.equals("String")) {
        methodName = "getString";
      } else if (type.equals("int")) {
        methodName = "getInt";
      } else {
        methodName = "getDouble";
      }
      output += "            " + name + " = result." + methodName + "(" + (i + 1) + ");\n";
    }

    output +=
        "        } catch (Exception e) {\n"
            + "            statuscode = 500;\n"
            + "        }\n"
            + "        return new "
            + program_id
            + "Record(statuscode, ";

    for (i = 0; i < params.length(); ++i) {
      param = params.getJSONObject(i);
      name = param.getString("variable_name");
      output += name;
      if (i < params.length() - 1) {
        output += ", ";
      }
    }
    output += ");\n" + "    }\n" + "}\n";

    return output;
  }

  public static String WriteRecord(FileWriter rcd_file, String program_id, JSONArray params) {
    JSONObject param;
    String name;
    String type;
    int i;

    String output =
        "package com.example.restservice;\n"
            + "public record "
            + program_id
            + "Record(int statuscode, ";

    for (i = 0; i < params.length(); ++i) {
      param = params.getJSONObject(i);
      name = param.getString("variable_name");
      type = param.getString("java_type");
      output += type + " " + name;
      if (i < params.length() - 1) {
        output += ", ";
      }
    }
    output += ") {}";

    return output;
  }
}
